* Sharinghood
  When in doubt, consult [[https://github.com/kelseyhightower/nocode][nocode]]
  * [[https://sharinghood-staging.herokuapp.com][Staging link]]
  * [[https://sharinghood.herokuapp.com][Production link]]

** Table of Contents                                               :noexport:
   :PROPERTIES:
   :TOC:      :include all
   :END:
   :CONTENTS:
   - [[#sharinghood][Introduction]]
     - [[#quick-overview][Quick Overview]]
     - [[#getting-started][Getting Started]]
     - [[#query][Query]]
     - [[#mutation][Mutation]]
     - [[#subscription][Subscription]]
     - [[#authentication][Authentication]]
     - [[#postgresql][PostgreSQL]]
     - [[#redis][Redis]]
     # - [[#logging][Logging]]
     - [[#dependencies][Dependencies]]
     - [[#testing][Testing]]
   - [[#contributors][Contributors]]
   :END:

** Quick Overview
*** Architecture
    #+begin_src
         CLIENT          |                     SERVER
                         |
                         |
                   +-----------+
            +------+    FCM    |<---+
            |      +-----------+    |
            |            |          |                   +--------------+
            V            |        +-+---------+         |  POSTGRESQL  |
      +----------+       |        |           +-------->|  SERVER      |
      |          |       |        |  GRAPHQL  |         +--------------+
      |  CLIENT  +----------------+  API      |
      |          |       |        |  SERVER   |         +--------------+
      +----------+       |        |           |-------->|    REDIS     |
            ^            |        +-----+-----+         |    SERVER    |
            |            |              |               +--------------+
            |            |              V
            |            |       +--------------+
            +--------------------+    IMAGE     |
                         |       |    SERVER    |
                         |       +--------------+
                         |
   #+end_src

*** Tech Stack
     * [[https://nextjs.org/][Next.js]]
     * [[https://www.apollographql.com/docs/][Apollo]]
     * [[https://www.postgresql.org/][PostgreSQL]]
     * [[https://redis.io/][Redis]]
     * [[http://cloudinary.com/][Cloudinary]]
     * [[https://firebase.google.com/docs/cloud-messaging][Firebase Cloud Messaging]]

** Getting Started
- Start the development server
#+begin_src bash
yarn dev
#+end_src

- ~.loacl.env~
#+begin_src bash
ORIGIN=http://localhost:3000
NODE_ENV=
JWT_SECRET=
DATABASE_URL=
REDIS_URL=
GMAIL_USERNAME=
OAUTH_CLIENT_ID=
OAUTH_CLIENT_SECRET=
OAUTH_REFRESH_TOKEN=
CLOUDINARY_CLOUD_NAME=
CLOUDINARY_API_KEY=
CLOUDINARY_SECRET_KEY=
NEXT_PUBLIC_VAPID_KEY=
NEXT_PUBLIC_DOMAIN=http://localhost:3000
NEXT_PUBLIC_GRAPHQL_ENDPOINT_HTTP=http://localhost:3000/api
NEXT_PUBLIC_GRAPHQL_ENDPOINT_WS=ws://localhost:3000/api
#+end_src

** Query
*** Users
    ~user~ - Get current user or a specific user and the user's posts
    | Arguments     | Required | Type | Description                                                             |
    |---------------+----------+------+-------------------------------------------------------------------------|
    | ~userId~      | false    | ~ID~ | Select a specific user; return only posts from given community if given |
    | ~communityId~ | false    | ~ID~ | select a specific community for user's posts                            |

    ~validateResetLink~ - Check user password reset link validity
    | Arguments  | Required | Type     | Description                |
    |------------+----------+----------+----------------------------|
    | ~resetKey~ | true     | ~String~ | Specify reset password key |

*** Communities
    ~community~ - Get a specific community by id or community code
    | Arguments       | Required | Type     | Description            |
    |-----------------+----------+----------+------------------------|
    | ~communityId~   | false    | ~String~ | Specify community id   |
    | ~communityCode~ | false    | ~String~ | Specify community code |

    ~communities~ - Get all communities that the current user is a member of
    | Arguments | Required | Type | Description            |
    |-----------+----------+------+------------------------|
    | ~userId~  | false    | ~ID~ | Select a specific user |

*** Posts
    ~post~ - Get a specific post
    | Arguments | Required | Type | Description            |
    |-----------+----------+------+------------------------|
    | ~postId~  | true     | ~ID~ | Select a specific post |

    ~posts~ - Get all the posts from a given community
    | Arguments     | Required | Type | Description         |
    |---------------+----------+------+---------------------|
    | ~communityId~ | true     | ~ID~ | Select from a specific community |

*** Requests
    ~request~ - Get a specific request
    | Arguments   | Required | Type | Description            |
    |-------------+----------+------+------------------------|
    | ~requestId~ | true     | ~ID~ | Select a specific post |

    ~posts~ - Get all the requests from a given community
    | Arguments     | Required | Type | Description                      |
    |---------------+----------+------+----------------------------------|
    | ~communityId~ | true     | ~ID~ | Select from a specific community |

*** Notifications
    ~notification~ - Get a specific notification
    | Arguments        | Required | Type | Description                    |
    |------------------+----------+------+--------------------------------|
    | ~notificationId~ | true     | ~ID~ | Select a specific notification |

    ~notifications~ - Get all the notifications of the current user from a given community
    | Arguments     | Required | Type | Description                      |
    |---------------+----------+------+----------------------------------|
    | ~communityId~ | true     | ~ID~ | Select from a specific community |

** Mutation
*** Users
    ~login~ - User authentication
    | Arguments  | Required | Type     | Description   |
    |------------+----------+----------+---------------|
    | ~email~    | true     | ~String~ | User email    |
    | ~password~ | true     | ~String~ | User password |

    ~updateUser~ - Update current user's data
    | Arguments   | Required | Type        | Description                    |
    |-------------+----------+-------------+--------------------------------|
    | ~userInput~ | true     | ~UserInput~ | Various ~User~ type input data |

    ~tokenRefresh~ - Refresh current user's ~accessToken~
    | Arguments | Required | Type     | Description                  |
    |-----------+----------+----------+------------------------------|
    | ~token~   | true     | ~String~ | Specify user's ~accesstoken~ |

    ~forgotPassword~ - Send reset password word email containing generated reset password link to user
    | Arguments | Required | Type     | Description |
    |-----------+----------+----------+-------------|
    | ~email~   | true     | ~String~ | User email  |

    ~resetPassword~ - Reset user's password
    | Arguments  | Required | Type     | Description                |
    |------------+----------+----------+----------------------------|
    | ~resetKey~ | true     | ~String~ | Specify reset password key |
    | ~password~ | true     | ~String~ | Specify new password       |

    ~register~ - Register user and/or create community for user (saves user as community creator)
    | Arguments        | Required | Type             | Description                                                    |
    |------------------+----------+------------------+----------------------------------------------------------------|
    | ~userInput~      | true     | ~UserInput~      | Various ~User~ type input data                                 |
    | ~communityInput~ | false    | ~CommunityInput~ | Various ~Community~ type input data; create community if given |

*** Communities
    ~createCommunity~ - Create community and save user as community creator
    | Arguments        | Required | Type             | Description                         |
    |------------------+----------+------------------+-------------------------------------|
    | ~communityInput~ | true     | ~CommunityInput~ | Various ~Community~ type input data |

    ~joinCommunity~ - Add current user to a specific community
    | Arguments     | Required | Type | Description         |
    |---------------+----------+------+---------------------|
    | ~communityId~ | true     | ~ID~ | Specify a community |

*** Posts
    ~createPost~ - Create a post
    | Arguments     | Required | Type        | Description                    |
    |---------------+----------+-------------+--------------------------------|
    | ~postInput~   | true     | ~PostInput~ | Various ~Post~ type input data |
    | ~communityId~ | true     | ~ID~        | Specify a community            |

    ~updatePost~ - Update a specific post
    | Arguments   | Required | Type        | Description                    |
    |-------------+----------+-------------+--------------------------------|
    | ~postInput~ | true     | ~PostInput~ | Various ~Post~ type input data |

    ~inactivatePost~ - Remove a specific post from all of the current user's communities
    | Arguments | Required | Type | Description    |
    |-----------+----------+------+----------------|
    | ~postId~  | true     | ~ID~ | Specify a post |

    ~deletePost~ - Delete a specific post, its related threads, bookings, and notifications; and remove the post from all of the current user's communities
    | Arguments     | Required | Type | Description         |
    |---------------+----------+------+---------------------|
    | ~postId~      | true     | ~ID~ | Specify a post      |
    | ~communityId~ | false    | ~ID~ | Specify a community |

    ~addPostToCommunity~ - Add a specific post to a specific community
    | Arguments     | Required | Type | Description         |
    |---------------+----------+------+---------------------|
    | ~postId~      | false    | ~ID~ | Specify a post      |
    | ~communityId~ | false    | ~ID~ | Specify a community |

*** Requests
    ~createRequest~ - Create a post
    | Arguments      | Required | Type           | Description                       |
    |----------------+----------+----------------+-----------------------------------|
    | ~requestInput~ | true     | ~RequestInput~ | Various ~Request~ type input data |
    | ~communityId~  | true     | ~ID~           | Specify a community               |

    ~deleteRequest~ - Delete a specific request, its related threads
    | Arguments     | Required | Type | Description         |
    |---------------+----------+------+---------------------|
    | ~requestId~   | true     | ~ID~ | Specify a post      |

*** Threads
    ~createThread~ - Add thread to a specific post or request
    | Arguments     | Required | Type          | Description                      |
    |---------------+----------+---------------+----------------------------------|
    | ~threadInput~ | true     | ~ThreadInput~ | Various ~Thread~ type input data |

*** Messages
    ~createMessage~ - Add a message to a specific notification
    | Arguments      | Required | Type           | Description                       |
    |----------------+----------+----------------+-----------------------------------|
    | ~messageInput~ | true     | ~MessageInput~ | Various ~Message~ type input data |

*** Bookings
    ~updateBooking~ - Update a specific booking's status
    | Arguments      | Required | Type           | Description                       |
    |----------------+----------+----------------+-----------------------------------|
    | ~bookingId~    | true     | ~ID~           | Specify a booking                 |
    | ~bookingInput~ | true     | ~BookingInput~ | Various ~Booking~ type input data |

** Subscription
*** Messages
    ~notificationMessage~ - Subscribe to messages from a give notification
    | Arguments        | Required | Type | Description            |
    |------------------+----------+------+------------------------|
    | ~notificationId~ | true     | ~ID~ | Specify a notification |

** Authentication
   The ~accesstoken~ and ~refreshToken~ [[https://jwt.io/][JSON Web Tokens]] are generated and send to client on authentication success. The ~accesstoken~ contains user's *id*, *name*, *email*, and other user related information, and it has a life span of 1 hour. The ~refreshtoken~ contains user's *id* and its version number, and is used to re-generated a new ~accesstoken~ when the ~accesstoken~ is expired, during which the refreshtoken's version number will be checked against what is stored in the database for the user. Should there be discrepancy between the refreshtoken's version number and user's ~tokenVersion~, the refresh process will be rejected. The ~refreshtoken~ expires in 7 days, and it is re-generated when the ~accesstoken~ is being re-generated. The user's ~tokenversion~ will be incremented on logout.

   All the resolvers, apart from the ~community~ /query/ and the ~createcommunity~ /mutation/, are protected from unauthrised access. The ~accesstoken~ is send to the server from the client and is validated; its contents is passed as context to subsequent resolvers. An ~AuthenticationError~ is thrown should the validation fails.

** PostgreSQL
   All essential data are stored on a [[https://www.postgresql.org/][PostgreSQL]] database server.

** Redis
   [[https://redis.io/][Redis]] is used as in-memory data store, and ~PubSubEngine~ for messages. Data such as password reset key and notifications read status are stored as key-value pairs for quick access. The chat functionality is a GraphQL subscription operation that utilizes Redis' ~Pub/Sub~ implementation.

** Firebase
   [[https://firebase.google.com/docs/cloud-messaging][Firebase Cloud Messaging]] is used as messaging service for push notifications to the web and mobile clients. Each user's FCM tokens are stored on MongoDB database server.

# ** Logging
#    Logging is handled by [[https://github.com/winstonjs/winston][winston]] and the logs are stored in the [[https://www.mongodb.com/][MongoDB]] database.

** Dependencies
  * [[https://nextjs.org/][Next.js]]
  * [[https://www.npmjs.com/package/moment][moment]]
  * [[https://www.npmjs.com/package/jspdf][jspdf]]
  * [[https://www.npmjs.com/package/firebase][firebase]]
  * [[https://www.npmjs.com/package/react-dates][react-dates]]
  * [[https://www.npmjs.com/package/react-modal][react-modal]]
  * [[https://www.npmjs.com/package/apollo-client][apollo-client]]
  * [[https://www.npmjs.com/package/@styled-jsx/plugin-sass][@styled-jsx/plugin-sass]]
  * [[https://www.npmjs.com/package/jwt-decode][jwt-decode]]
  * [[https://www.npmjs.com/package/apollo-server-micro][apollo-server-micro]]
  * [[https://www.npmjs.com/package/pg][pg]]
  * [[https://www.npmjs.com/package/typeorm][typeorm]]
  * [[https://www.npmjs.com/package/typeorm-naming-strategies][typeorm-naming-strategies]]
  * [[https://www.npmjs.com/package/@mando75/typeorm-graphql-loader][@mando75/typeorm-graphql-loader]]
  * [[https://www.npmjs.com/package/subscriptions-transport-ws][subscriptions-transport-ws]]
  * [[https://www.npmjs.com/package/ioredis][ioredis]]
  * [[https://www.npmjs.com/package/graphql-redis-subscriptions][graphql-redis-subscriptions]]
  * [[https://www.npmjs.com/package/google-auth-library][google-auth-library]]
  * [[https://www.npmjs.com/package/bcrypt][bcryptjs]]
  * [[https://www.npmjs.com/package/jsonwebtoken][jsonwebtoken]]
  * [[https://www.npmjs.com/package/cloudinary][cloudinary]]
  * [[https://www.npmjs.com/package/node-gcm][node-gcm]]
  * [[https://www.npmjs.com/package/nodemailer][nodemailer]]

** Testing
   Run tests on local server
   #+begin_src bash
   yarn test
   #+end_src

* Contributors
  * [[https://github.com/kevinbogao][@kevinbogao]] - Kevin Gao
  * [[https://github.com/techyon7][@techyon7]] - Sparsh Tyagi
